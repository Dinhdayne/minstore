import React, { useState, useEffect } from "react";
import "./App.css";
const user = JSON.parse(localStorage.getItem("user"));
const CartPage = ({ userId = user.user_id }) => {
    const [cart, setCart] = useState(null);
    const [items, setItems] = useState([]);
    const [loading, setLoading] = useState(true);
    const token = localStorage.getItem("token");
    // const [selectedColor, setSelectedColor] = useState(initialColor);
    // const [selectedSize, setSelectedSize] = useState(initialSize);

    // H√†m h·ªó tr·ª£ parse JSON an to√†n
    const parseMaybeJSON = (val) => {
        if (!val) return {};
        if (typeof val === "object") return val;
        if (typeof val === "string") {
            try {
                return JSON.parse(val);
            } catch {
                return {};
            }
        }
        return {};
    };

    // üß≠ Th√™m state l∆∞u danh s√°ch ƒë·ªãa ch·ªâ & ƒë·ªãa ch·ªâ ƒë∆∞·ª£c ch·ªçn
    const [addresses, setAddresses] = useState([]);
    const [selectedAddressId, setSelectedAddressId] = useState(null);
    const [selectedAddress, setSelectedAddress] = useState(null);

    // üß≠ L·∫•y danh s√°ch ƒë·ªãa ch·ªâ ng∆∞·ªùi d√πng
    useEffect(() => {
        const fetchAddresses = async () => {
            try {
                const res = await fetch(`http://localhost:3000/api/addresses/user/${userId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                });
                if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i ƒë·ªãa ch·ªâ");
                const data = await res.json();

                setAddresses(data);

                // T√¨m ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
                const defaultAddr = data.find((a) => a.is_default === 1 || a.is_default === true);
                if (defaultAddr) {
                    setSelectedAddressId(defaultAddr.address_id);
                    setSelectedAddress(defaultAddr);
                }
            } catch (err) {
                console.error("L·ªói t·∫£i ƒë·ªãa ch·ªâ:", err);
            }
        };

        fetchAddresses();
    }, [userId, token]);

    // üß≠ Khi ch·ªçn ƒë·ªãa ch·ªâ kh√°c
    useEffect(() => {
        const addr = addresses.find((a) => a.address_id === selectedAddressId);
        setSelectedAddress(addr || null);
    }, [selectedAddressId, addresses]);


    // L·∫•y gi·ªè h√†ng
    useEffect(() => {
        const fetchCart = async () => {
            try {
                const res = await fetch(`http://localhost:3000/api/cart/${userId}`, {
                    headers: { Authorization: `Bearer ${token}` },
                });
                if (!res.ok) throw new Error("Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng");
                const data = await res.json();
                setCart(data.cart);
                setItems(data.items || []);
            } catch (err) {
                console.error("L·ªói t·∫£i gi·ªè h√†ng:", err);
            } finally {
                setLoading(false);
            }
        };
        fetchCart();
    }, [userId, token]);

    // üü¢ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng
    const updateQuantity = async (cartItemId, delta) => {
        const item = items.find((i) => i.cart_item_id === cartItemId);
        if (!item) return;
        const newQuantity = Math.max(1, item.quantity + delta);

        try {
            const res = await fetch(`http://localhost:3000/api/cart/update/${cartItemId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ quantity: newQuantity }),
            });

            if (!res.ok) throw new Error("C·∫≠p nh·∫≠t th·∫•t b·∫°i");
            setItems((prev) =>
                prev.map((i) =>
                    i.cart_item_id === cartItemId ? { ...i, quantity: newQuantity } : i
                )
            );
        } catch (err) {
            console.error("L·ªói updateQuantity:", err);
        }
    };

    // üü¢ C·∫≠p nh·∫≠t m√†u/variant
    const updateVariant = async (cartItemId, newVariantId) => {
        try {
            // 1Ô∏è‚É£ C·∫≠p nh·∫≠t variant_id trong DB
            const res = await fetch(`http://localhost:3000/api/cart/update-variant/${cartItemId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({ variantId: newVariantId }),
            });

            if (!res.ok) throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m√†u s·∫Øc");

            // 2Ô∏è‚É£ L·∫•y th√¥ng tin variant m·ªõi (ƒë·ªÉ ƒë·ªïi ·∫£nh hi·ªÉn th·ªã)
            const variantRes = await fetch(`http://localhost:3000/api/variants/${newVariantId}`);
            if (!variantRes.ok) throw new Error("Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin variant m·ªõi");
            const variantData = await variantRes.json();

            // 3Ô∏è‚É£ C·∫≠p nh·∫≠t l·∫°i item trong FE (·∫£nh, m√†u, gi√°)
            setItems((prev) =>
                prev.map((i) =>
                    i.cart_item_id === cartItemId
                        ? {
                            ...i,
                            variant_id: newVariantId,
                            image_url: variantData.image_url,
                            price: variantData.price,
                            attributes: variantData.attributes,
                        }
                        : i
                )
            );
        } catch (err) {
            console.error("L·ªói updateVariant:", err);
        }
    };

    // üü¢ X√≥a s·∫£n ph·∫©m
    const removeItem = async (cartItemId) => {
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a s·∫£n ph·∫©m n√†y?")) return;
        try {
            const res = await fetch(`http://localhost:3000/api/cart/item/${cartItemId}`, {
                method: "DELETE",
                headers: { Authorization: `Bearer ${token}` },
            });
            if (!res.ok) throw new Error("X√≥a th·∫•t b·∫°i");
            setItems((prev) => prev.filter((i) => i.cart_item_id !== cartItemId));
        } catch (err) {
            console.error("L·ªói removeItem:", err);
        }
    };

    const totalPrice = items.reduce(
        (sum, item) => sum + parseFloat(item.price) * item.quantity,
        0
    );
    // üü¢ H√†m x·ª≠ l√Ω ƒë·∫∑t h√†ng
    const handlePlaceOrder = async () => {
        if (!selectedAddressId) {
            alert("Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng!");
            return;
        }

        if (items.length === 0) {
            alert("Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng!");
            return;
        }

        if (!window.confirm("X√°c nh·∫≠n ƒë·∫∑t h√†ng?")) return;

        try {
            const orderData = {
                user_id: userId,
                address_id: selectedAddressId,
                total_amount: totalPrice,
                shipping_fee: 0,
                discount_amount: 0,
                notes: document.querySelector(".shipping-form textarea")?.value || "",
                items: items.map((item) => ({
                    variant_id: item.variant_id,
                    quantity: item.quantity,
                    price: item.price,
                })),
            };

            const res = await fetch("http://localhost:3000/api/orders/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify(orderData),
            });

            const data = await res.json();

            if (!res.ok) throw new Error(data.message || "ƒê·∫∑t h√†ng th·∫•t b·∫°i");

            alert("‚úÖ ƒê·∫∑t h√†ng th√†nh c√¥ng!");
            // X√≥a gi·ªè h√†ng sau khi ƒë·∫∑t
            // setItems([]);
            // setCart(null);
        } catch (err) {
            console.error("L·ªói ƒë·∫∑t h√†ng:", err);
            alert("‚ùå L·ªói khi ƒë·∫∑t h√†ng. Vui l√≤ng th·ª≠ l·∫°i.");
        }
    };

    if (loading) return <p className="loading">ƒêang t·∫£i gi·ªè h√†ng...</p>;

    return (
        <div className="cart-container">
            {/* B√™n tr√°i - th√¥ng tin giao h√†ng */}
            <div className="cart-left">
                <h2>Th√¥ng tin v·∫≠n chuy·ªÉn</h2>

                {selectedAddress ? (
                    <div className="default-address-box">
                        <p><strong>ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh:</strong></p>
                        <p>{selectedAddress.ward}, {selectedAddress.district}, {selectedAddress.city}</p>
                    </div>
                ) : (
                    <p>Kh√¥ng t√¨m th·∫•y ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh.</p>
                )}

                <div className="address-selector">
                    <label>Ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng kh√°c:</label>
                    <select
                        value={selectedAddressId || ""}
                        onChange={(e) => setSelectedAddressId(Number(e.target.value))}
                    >
                        {addresses.map((addr) => (
                            <option key={addr.address_id} value={addr.address_id}>
                                {addr.ward}, {addr.district}, {addr.city}
                                {addr.is_default ? " (M·∫∑c ƒë·ªãnh)" : ""}
                            </option>
                        ))}
                    </select>
                </div>

                <form className="shipping-form">
                    <div className="form-row">
                        <select>
                            <option>Anh/Ch·ªã</option>
                        </select>
                        <input type="text" placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n" />
                        <input type="text" placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n" />
                    </div>
                    <input type="email" placeholder="Nh·∫≠p email c·ªßa b·∫°n" />
                    <textarea placeholder="Nh·∫≠p ghi ch√∫"></textarea>
                </form>
            </div>


            {/* B√™n ph·∫£i - gi·ªè h√†ng */}
            <div className="cart-right">
                <h2>Gi·ªè h√†ng</h2>
                <div className="cart-note">Y√™n t√¢m 60 ng√†y ƒë·ªïi tr·∫£ - Freeship ƒë∆°n t·ª´ 200k</div>

                {items.length === 0 ? (
                    <p>Gi·ªè h√†ng tr·ªëng.</p>
                ) : (
                    <>
                        {items.map((item) => {
                            const attributes = parseMaybeJSON(item.attributes);
                            const color = attributes?.color || "Kh√¥ng c√≥ m√†u";

                            // ·∫£nh th·∫≠t t∆∞∆°ng ·ª©ng variant
                            const imageUrl =
                                item.image_url ||
                                `https://via.placeholder.com/300x350?text=${encodeURIComponent(item.product_name)}`;

                            // N·∫øu c√≥ nhi·ªÅu variant trong product, hi·ªÉn th·ªã dropdown ƒë·ªïi m√†u
                            const availableVariants = parseMaybeJSON(item.available_variants || []);
                            const variantOptions = Array.isArray(availableVariants)
                                ? availableVariants
                                : [];

                            return (
                                <div key={item.cart_item_id} className="cart-item">
                                    <div className="item-info">
                                        {/* Dropdown ch·ªçn m√†u th·∫≠t */}
                                        <div key={item.cart_item_id} className="cart-item">
                                            <img src={imageUrl} alt={item.product_name} />
                                            <div className="item-info">
                                                <h3>{item.product_name}</h3>

                                                {/* --- ch·ªçn m√†u s·∫Øc --- */}
                                                {variantOptions.length > 0 && (
                                                    <div className="variant-section">
                                                        <div className="variant-label">M√†u s·∫Øc:</div>
                                                        <div className="color-options">
                                                            {[
                                                                ...new Set(
                                                                    variantOptions
                                                                        .map((v) => parseMaybeJSON(v.attributes)?.color)
                                                                        .filter(Boolean)
                                                                ),
                                                            ].map((colorOption) => {
                                                                // t√¨m variant c√≥ c√πng m√†u
                                                                const matchedVariant = variantOptions.find((v) => {
                                                                    const attr = parseMaybeJSON(v.attributes);
                                                                    return attr?.color === colorOption;
                                                                });

                                                                return (
                                                                    <button
                                                                        key={matchedVariant.variant_id}
                                                                        className={`color-btn ${item.variant_id === matchedVariant.variant_id
                                                                            ? "selected"
                                                                            : ""
                                                                            }`}
                                                                        onClick={() =>
                                                                            updateVariant(
                                                                                item.cart_item_id,
                                                                                matchedVariant.variant_id
                                                                            )
                                                                        }
                                                                    >
                                                                        {colorOption}
                                                                        {item.variant_id === matchedVariant.variant_id && (
                                                                            <span className="corner-flag"></span>
                                                                        )}
                                                                    </button>
                                                                );
                                                            })}
                                                        </div>
                                                    </div>
                                                )}

                                                {/* --- ch·ªçn k√≠ch th∆∞·ªõc --- */}
                                                {variantOptions.length > 0 && (
                                                    <div className="variant-section">
                                                        <div className="variant-label">K√≠ch th∆∞·ªõc:</div>
                                                        <div className="size-options">
                                                            {(() => {
                                                                const currentColor = parseMaybeJSON(item.attributes)?.color;

                                                                // üîπ L·ªçc ra c√°c variant c√πng m√†u ƒëang ch·ªçn
                                                                const sizeVariants = variantOptions.filter((v) => {
                                                                    const attr = parseMaybeJSON(v.attributes);
                                                                    return attr?.color === currentColor;
                                                                });

                                                                // üîπ L·∫•y danh s√°ch size duy nh·∫•t
                                                                const uniqueSizes = [
                                                                    ...new Set(sizeVariants.map((v) => parseMaybeJSON(v.attributes)?.size).filter(Boolean)),
                                                                ];

                                                                return uniqueSizes.map((sizeOption) => {
                                                                    const matchedVariant = sizeVariants.find((v) => {
                                                                        const attr = parseMaybeJSON(v.attributes);
                                                                        return attr?.size === sizeOption;
                                                                    });

                                                                    return (
                                                                        <button
                                                                            key={matchedVariant.variant_id}
                                                                            className={`size-btn ${item.variant_id === matchedVariant.variant_id ? "selected" : ""
                                                                                }`}
                                                                            onClick={() =>
                                                                                updateVariant(item.cart_item_id, matchedVariant.variant_id)
                                                                            }
                                                                        >
                                                                            {sizeOption}
                                                                            {item.variant_id === matchedVariant.variant_id && (
                                                                                <span className="corner-flag"></span>
                                                                            )}
                                                                        </button>
                                                                    );
                                                                });
                                                            })()}
                                                        </div>
                                                    </div>
                                                )}

                                            </div>
                                        </div>


                                        {/* S·ªë l∆∞·ª£ng */}
                                        <div className="quantity-control">
                                            <button onClick={() => updateQuantity(item.cart_item_id, -1)}>‚àí</button>
                                            <span>{item.quantity}</span>
                                            <button onClick={() => updateQuantity(item.cart_item_id, 1)}>+</button>
                                        </div>

                                        {/* Gi√° + x√≥a */}
                                        <div className="price-row">
                                            <span className="price">
                                                {parseFloat(item.price).toLocaleString()}‚Ç´
                                            </span>
                                            <button
                                                className="remove-btn"
                                                onClick={() => removeItem(item.cart_item_id)}
                                            >
                                                X√≥a
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            );
                        })}

                        <div className="cart-summary">
                            <p>
                                <strong>T·ªïng c·ªông:</strong>{" "}
                                <span className="total">{totalPrice.toLocaleString()}‚Ç´</span>
                            </p>
                            <button className="checkout-btn" onClick={handlePlaceOrder}>
                                ƒê·∫∑t h√†ng
                            </button>
                        </div>

                    </>
                )}
            </div>
        </div>
    );
};

export default CartPage;
