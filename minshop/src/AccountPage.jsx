import React, { useState, useEffect } from "react";
import "./AccountPage.css"; // import CSS n√†y nh√©

const AddAddressModal = ({ onClose, onSaved }) => {
    const [provinces, setProvinces] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [wards, setWards] = useState([]);

    const [selectedProvince, setSelectedProvince] = useState("");
    const [selectedDistrict, setSelectedDistrict] = useState("");
    const [selectedWard, setSelectedWard] = useState("");
    const [detail, setDetail] = useState("");
    const [isDefault, setIsDefault] = useState(false);

    // üü¶ L·∫•y danh s√°ch t·ªânh/th√†nh
    useEffect(() => {
        const fetchProvinces = async () => {
            try {
                const res = await fetch("https://provinces.open-api.vn/api/?depth=3");
                const data = await res.json();
                setProvinces(data);
            } catch (error) {
                console.error("L·ªói khi t·∫£i danh s√°ch t·ªânh/th√†nh:", error);
            }
        };
        fetchProvinces();
    }, []);

    const handleProvinceChange = (e) => {
        const provinceCode = e.target.value;
        setSelectedProvince(provinceCode);
        setSelectedDistrict("");
        setSelectedWard("");
        const province = provinces.find((p) => p.code.toString() === provinceCode);
        setDistricts(province ? province.districts : []);
        setWards([]);
    };

    const handleDistrictChange = (e) => {
        const districtCode = e.target.value;
        setSelectedDistrict(districtCode);
        setSelectedWard("");
        const district = districts.find((d) => d.code.toString() === districtCode);
        setWards(district ? district.wards : []);
    };

    const handleSave = async () => {
        const user = JSON.parse(localStorage.getItem("user"));
        if (!user?.user_id) return alert("Kh√¥ng t√¨m th·∫•y user_id!");

        const province = provinces.find(p => p.code == selectedProvince)?.name || "";
        const district = districts.find(d => d.code == selectedDistrict)?.name || "";
        const ward = wards.find(w => w.code == selectedWard)?.name || "";

        const addressData = {
            user_id: user.user_id,
            city: province,
            district,
            ward,
            zip_code: "",
            is_default: isDefault,
        };

        try {
            const token = localStorage.getItem("token");
            const res = await fetch("http://localhost:3000/api/addresses", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`,
                },
                body: JSON.stringify(addressData),
            });

            if (res.ok) {
                alert("Th√™m ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
                onSaved(); // reload danh s√°ch
                onClose();
            } else {
                const err = await res.json();
                alert("L·ªói: " + err.message);
            }
        } catch (error) {
            console.error("L·ªói khi l∆∞u ƒë·ªãa ch·ªâ:", error);
            alert("Kh√¥ng th·ªÉ l∆∞u ƒë·ªãa ch·ªâ!");
        }
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h2>Th√™m ƒê·ªãa Ch·ªâ</h2>

                <input
                    type="text"
                    className="full-input"
                    placeholder="ƒê·ªãa ch·ªâ (s·ªë nh√†, ƒë∆∞·ªùng...)"
                    value={detail}
                    onChange={(e) => setDetail(e.target.value)}
                />

                {/* T·ªânh/TP */}
                <select
                    className="full-input"
                    value={selectedProvince}
                    onChange={handleProvinceChange}
                >
                    <option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>
                    {provinces.map((p) => (
                        <option key={p.code} value={p.code}>
                            {p.name}
                        </option>
                    ))}
                </select>

                {/* Qu·∫≠n/Huy·ªán */}
                {districts.length > 0 && (
                    <select
                        className="full-input"
                        value={selectedDistrict}
                        onChange={handleDistrictChange}
                    >
                        <option value="">Ch·ªçn qu·∫≠n/huy·ªán</option>
                        {districts.map((d) => (
                            <option key={d.code} value={d.code}>
                                {d.name}
                            </option>
                        ))}
                    </select>
                )}

                {/* Ph∆∞·ªùng/X√£ */}
                {wards.length > 0 && (
                    <select
                        className="full-input"
                        value={selectedWard}
                        onChange={(e) => setSelectedWard(e.target.value)}
                    >
                        <option value="">Ch·ªçn ph∆∞·ªùng/x√£</option>
                        {wards.map((w) => (
                            <option key={w.code} value={w.code}>
                                {w.name}
                            </option>
                        ))}
                    </select>
                )}

                <label className="checkbox">
                    <input
                        type="checkbox"
                        checked={isDefault}
                        onChange={(e) => setIsDefault(e.target.checked)}
                    />{" "}
                    ƒê·∫∑t l√†m ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh
                </label>

                <div className="button-group">
                    <button className="btn-cancel" onClick={onClose}>
                        ƒê√≥ng
                    </button>
                    <button className="btn-save" onClick={handleSave}>
                        L∆∞u
                    </button>
                </div>
            </div>
        </div>
    );
};

// üß© Modal c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
const UpdateProfileModal = ({ profile, onClose, onUpdated }) => {
    const [form, setForm] = useState({
        first_name: profile?.first_name || "",
        last_name: profile?.last_name || "",
        phone: profile?.phone || "",
        gender: profile?.gender || "",
        date_of_birth: profile?.date_of_birth
            ? profile.date_of_birth.split("T")[0]
            : "",
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setForm({ ...form, [name]: value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            const user = JSON.parse(localStorage.getItem("user"));
            if (!user?.user_id) return alert("Kh√¥ng t√¨m th·∫•y user_id!");

            const res = await fetch(
                `http://localhost:3000/api/userProfile/${user.user_id}`,
                {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(form),
                }
            );

            const data = await res.json();
            if (res.ok) {
                alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                onUpdated();
                onClose();
            } else {
                alert("L·ªói: " + data.message);
            }
        } catch (err) {
            console.error(err);
            alert("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t th√¥ng tin!");
        }
    };

    return (
        <div className="modal-overlay">
            <div className="modal-content">
                <h2>C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n</h2>

                <form onSubmit={handleSubmit}>
                    <div className="form-group">
                        <input
                            name="first_name"
                            value={form.first_name}
                            onChange={handleChange}
                            placeholder="H·ªç"
                        />
                        <input
                            name="last_name"
                            value={form.last_name}
                            onChange={handleChange}
                            placeholder="T√™n"
                        />
                    </div>

                    <input
                        name="phone"
                        value={form.phone}
                        onChange={handleChange}
                        placeholder="S·ªë ƒëi·ªán tho·∫°i"
                        className="full-input"
                    />

                    <select
                        name="gender"
                        value={form.gender}
                        onChange={handleChange}
                        className="full-input"
                    >
                        <option value="">Gi·ªõi t√≠nh</option>
                        <option value="male">Nam</option>
                        <option value="female">N·ªØ</option>
                    </select>

                    <input
                        type="date"
                        name="date_of_birth"
                        value={form.date_of_birth}
                        onChange={handleChange}
                        className="full-input"
                    />

                    <div className="button-group">
                        <button
                            type="button"
                            className="btn-cancel"
                            onClick={onClose}
                        >
                            H·ªßy
                        </button>
                        <button type="submit" className="btn-save">
                            L∆∞u thay ƒë·ªïi
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
};

const AccountPage = () => {
    const [activeTab, setActiveTab] = useState("Th√¥ng tin t√†i kho·∫£n");
    const [showModal, setShowModal] = useState(false);
    const [showUpdateModal, setShowUpdateModal] = useState(false);

    const [profile, setProfile] = useState(null);
    const [addresses, setAddresses] = useState([]);
    const [loading, setLoading] = useState(true);

    const [orders, setOrders] = useState([]);
    const [loadingOrders, setLoadingOrders] = useState(true);

    const fetchOrders = async () => {
        const user = JSON.parse(localStorage.getItem("user"));
        if (!user?.user_id) return;

        try {
            const res = await fetch(`http://localhost:3000/api/orders/user/${user.user_id}`);
            const data = await res.json();
            if (res.ok) {
                setOrders(data);
            } else {
                console.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n:", data.message);
            }
        } catch (err) {
            console.error("L·ªói fetchOrders:", err);
        } finally {
            setLoadingOrders(false);
        }
    };

    useEffect(() => {
        if (activeTab === "L·ªãch s·ª≠ ƒë∆°n h√†ng") {
            fetchOrders();
        }
    }, [activeTab]);

    const menuItems = [
        "Th√¥ng tin t√†i kho·∫£n",
        "L·ªãch s·ª≠ ƒë∆°n h√†ng",
        "V√≠ Voucher",
        "S·ªï ƒë·ªãa ch·ªâ",
        "ƒê√°nh gi√° v√† ph·∫£n h·ªìi",
    ];

    const InfoRow = ({ label, value }) => (
        <div className="info-row">
            <span className="info-label">{label}</span>
            <span className="info-value">{value}</span>
        </div>
    );


    const fetchProfile = async () => {
        try {
            const user = JSON.parse(localStorage.getItem("user"));
            if (!user || !user.user_id) {
                console.warn("Kh√¥ng t√¨m th·∫•y user_id trong localStorage");
                setLoading(false);
                return;
            }

            const res = await fetch(
                `http://localhost:3000/api/userProfile/${user.user_id}`
            );
            const data = await res.json();

            if (res.ok) setProfile(data);
            else console.error("L·ªói khi l·∫•y profile:", data.message);
        } catch (error) {
            console.error("L·ªói khi g·ªçi API:", error);
        } finally {
            setLoading(false);
        }
    };
    // üü® L·∫•y danh s√°ch ƒë·ªãa ch·ªâ
    const fetchAddresses = async () => {
        const user = JSON.parse(localStorage.getItem("user"));
        if (!user?.user_id) return;
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/addresses/user/${user.user_id}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
            }
            );

            const data = await res.json();
            if (res.ok) setAddresses(data);
        } catch (error) {
            console.error("L·ªói khi l·∫•y ƒë·ªãa ch·ªâ:", error);
        }
    };
    // üîπ ƒê·∫∑t m·∫∑c ƒë·ªãnh
    const handleSetDefault = async (addressId) => {
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/addresses/set-default/${addressId}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
            });
            const data = await res.json();
            if (res.ok) {
                alert(data.message);
                fetchAddresses();
            } else {
                alert("L·ªói: " + data.message);
            }
        } catch (error) {
            console.error(error);
            alert("Kh√¥ng th·ªÉ ƒë·∫∑t m·∫∑c ƒë·ªãnh!");
        }
    };

    // üîπ X√≥a ƒë·ªãa ch·ªâ
    const handleDeleteAddress = async (addressId) => {
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° ƒë·ªãa ch·ªâ n√†y kh√¥ng?")) return;
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/addresses/${addressId}`, {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
            });
            const data = await res.json();
            if (res.ok) {
                alert(data.message);
                fetchAddresses();
            } else {
                alert("L·ªói: " + data.message);
            }
        } catch (error) {
            console.error(error);
            alert("Kh√¥ng th·ªÉ xo√° ƒë·ªãa ch·ªâ!");
        }
    };

    // üîπ S·ª≠a ƒë·ªãa ch·ªâ
    const handleEditAddress = (addr) => {
        setShowModal(true);
        setEditingAddress(addr); // th√™m state n√†y
    };
    useEffect(() => {
        fetchProfile();
        fetchAddresses();
    }, []);

    const safeValue = (val, fallback = "Ch∆∞a c·∫≠p nh·∫≠t") =>
        val && val !== "" ? val : fallback;

    const renderContent = () => {
        switch (activeTab) {
            case "Th√¥ng tin t√†i kho·∫£n":
                return (
                    <>
                        <h2>Th√¥ng tin t√†i kho·∫£n</h2>
                        <div className="info-section">
                            <InfoRow
                                label="H·ªç v√† t√™n"
                                value={`${safeValue(profile?.first_name)} ${safeValue(
                                    profile?.last_name
                                )}`}
                            />
                            <InfoRow
                                label="S·ªë ƒëi·ªán tho·∫°i"
                                value={safeValue(profile?.phone)}
                            />
                            <InfoRow
                                label="Gi·ªõi t√≠nh"
                                value={
                                    profile?.gender === "male"
                                        ? "Nam"
                                        : profile?.gender === "female"
                                            ? "N·ªØ"
                                            : "Ch∆∞a c·∫≠p nh·∫≠t"
                                }
                            />
                            <InfoRow
                                label="Ng√†y sinh"
                                value={
                                    profile?.date_of_birth
                                        ? new Date(
                                            profile.date_of_birth
                                        ).toLocaleDateString("vi-VN")
                                        : "H√£y c·∫≠p nh·∫≠t ng√†y sinh ƒë·ªÉ ch√∫ng t√¥i g·ª≠i qu√† sinh nh·∫≠t nh√©"
                                }
                            />
                        </div>

                        <button
                            className="btn-update"
                            onClick={() => setShowUpdateModal(true)}
                        >
                            C·∫≠p nh·∫≠t
                        </button>

                        {showUpdateModal && (
                            <UpdateProfileModal
                                profile={profile}
                                onClose={() => setShowUpdateModal(false)}
                                onUpdated={fetchProfile}
                            />
                        )}

                        <div className="info-login">
                            <h3>Th√¥ng tin ƒëƒÉng nh·∫≠p</h3>
                            <InfoRow
                                label="Email"
                                value={safeValue(profile?.email)}
                            />
                            <InfoRow label="M·∫≠t kh·∫©u" value="************" />
                            <button className="btn-update">C·∫≠p nh·∫≠t</button>
                        </div>
                    </>
                );

            case "L·ªãch s·ª≠ ƒë∆°n h√†ng":
                return (
                    <div className="orders-section">
                        <h2>L·ªãch s·ª≠ ƒë∆°n h√†ng</h2>

                        {loadingOrders ? (
                            <p>ƒêang t·∫£i ƒë∆°n h√†ng...</p>
                        ) : orders.length === 0 ? (
                            <p>B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</p>
                        ) : (
                            <div className="orders-list">
                                {orders.map((order) => (
                                    <div key={order.order_id} className="order-card">
                                        <div className="order-header">
                                            <div>
                                                <strong>M√£ ƒë∆°n:</strong> #{order.order_id}
                                            </div>
                                            <div>
                                                <strong>Ng√†y ƒë·∫∑t:</strong>{" "}
                                                {new Date(order.order_date).toLocaleDateString("vi-VN")}
                                            </div>
                                            <div className={`order-status status-${order.status}`}>
                                                {order.status === "pending"
                                                    ? "Ch·ªù x·ª≠ l√Ω"
                                                    : order.status === "processing"
                                                        ? "ƒêang x·ª≠ l√Ω"
                                                        : order.status === "shipped"
                                                            ? "ƒêang giao"
                                                            : order.status === "delivered"
                                                                ? "Ho√†n th√†nh"
                                                                : order.status === "cancelled"
                                                                    ? "ƒê√£ h·ªßy"
                                                                    : order.status}
                                            </div>
                                        </div>

                                        {/* Danh s√°ch s·∫£n ph·∫©m */}
                                        <div className="order-items">
                                            {order.items.map((item) => (
                                                <div key={item.order_item_id} className="order-item">
                                                    <img
                                                        src={
                                                            item.image_url ||
                                                            `https://via.placeholder.com/80x80?text=${encodeURIComponent(
                                                                item.product_name
                                                            )}`
                                                        }
                                                        alt={item.product_name}
                                                    />
                                                    <div className="item-info">
                                                        <p className="product-name">{item.product_name}</p>
                                                        <p className="variant">
                                                            {item.attributes?.color
                                                                ? `M√†u: ${item.attributes.color}`
                                                                : ""}
                                                        </p>
                                                        <p className="variant">
                                                            {item.attributes?.size
                                                                ? `Size: ${item.attributes.size}`
                                                                : ""}
                                                        </p>
                                                        <p>
                                                            SL: <strong>{item.quantity}</strong>
                                                        </p>
                                                    </div>
                                                    <div className="item-price">
                                                        {(item.price * item.quantity).toLocaleString()}‚Ç´
                                                    </div>
                                                </div>
                                            ))}
                                        </div>

                                        {/* T·ªïng ti·ªÅn */}
                                        <div className="order-total">
                                            <span>T·ªïng ti·ªÅn:</span>{" "}
                                            <strong>{order.total_amount.toLocaleString()}‚Ç´</strong>
                                        </div>

                                        {/* ƒê·ªãa ch·ªâ giao h√†ng */}
                                        <div className="order-address">
                                            <small>
                                                Giao ƒë·∫øn: {order.ward}, {order.district}, {order.city}
                                            </small>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                );


            case "V√≠ Voucher":
                return (
                    <>
                        <h2>V√≠ Voucher</h2>
                        <p>B·∫°n ch∆∞a c√≥ voucher n√†o.</p>
                    </>
                );

            case "S·ªï ƒë·ªãa ch·ªâ":
                return (
                    <div className="address-book">
                        <div className="address-header">
                            <h2>ƒê·ªãa ch·ªâ c·ªßa t√¥i</h2>
                            <button onClick={() => setShowModal(true)} className="btn-save">
                                + Th√™m ƒë·ªãa ch·ªâ m·ªõi
                            </button>
                        </div>

                        {showModal && (
                            <AddAddressModal
                                onClose={() => setShowModal(false)}
                                onSaved={fetchAddresses}
                                editingAddress
                            />
                        )}

                        {addresses.length === 0 ? (
                            <p className="no-address">B·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ n√†o!</p>
                        ) : (
                            <div className="address-list">
                                {addresses.map((addr) => (
                                    <div key={addr.address_id} className="address-item">
                                        <div className="address-info">
                                            {addr.ward}, {addr.district}, {addr.city}
                                            {Boolean(addr.is_default) && (
                                                <span className="default-icon" title="ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh">‚úî</span>
                                            )}
                                        </div>

                                        <div className="address-actions">
                                            {!addr.is_default && (
                                                <button
                                                    className="btn-set-default"
                                                    onClick={() => handleSetDefault(addr.address_id)}
                                                >
                                                    ƒê·∫∑t m·∫∑c ƒë·ªãnh
                                                </button>
                                            )}
                                            <button
                                                className="btn-edit"
                                                onClick={() => handleEditAddress(addr)}
                                            >
                                                S·ª≠a
                                            </button>
                                            <button
                                                className="btn-delete"
                                                onClick={() => handleDeleteAddress(addr.address_id)}
                                            >
                                                Xo√°
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>

                        )}
                    </div>
                );

            case "ƒê√°nh gi√° v√† ph·∫£n h·ªìi":
                return (
                    <>
                        <h2>ƒê√°nh gi√° & ph·∫£n h·ªìi</h2>
                        <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
                    </>
                );

            default:
                return null;
        }
    };

    return (
        <div className="account-container">
            {/* Sidebar tr√°i */}
            <div className="account-sidebar">
                {menuItems.map((item) => (
                    <button
                        key={item}
                        onClick={() => setActiveTab(item)}
                        className={`sidebar-item ${activeTab === item ? "active" : ""
                            }`}
                    >
                        <span>{item}</span>
                    </button>
                ))}
            </div>

            {/* N·ªôi dung ph·∫£i */}
            <div className="account-content">{renderContent()}</div>
        </div>
    );
};

export default AccountPage;
