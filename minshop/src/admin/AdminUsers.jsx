import React, { useEffect, useState } from "react";
import "./AdminPage.css";

const AdminUsers = () => {
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [editingUser, setEditingUser] = useState(null);

    // üß© L·∫•y danh s√°ch user
    const fetchUsers = async () => {
        try {
            const res = await fetch("http://localhost:3000/api/users");
            const data = await res.json();
            if (res.ok) setUsers(data);
            else console.error("L·ªói l·∫•y users:", data.message);
        } catch (err) {
            console.error("L·ªói fetch users:", err);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        fetchUsers();
    }, []);

    // ‚ùå X√≥a user
    const handleDeleteUser = async (id) => {
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?")) return;
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/users/${id}`, {
                method: "DELETE",
                headers: {
                    "Authorization": `Bearer ${token}`
                },
            });
            if (res.ok) {
                alert("ƒê√£ x√≥a ng∆∞·ªùi d√πng!");
                fetchUsers();
            } else {
                alert("X√≥a th·∫•t b·∫°i!");
            }
        } catch (err) {
            console.error("L·ªói khi x√≥a user:", err);
        }
    };

    // üîÑ B·∫≠t/t·∫Øt t√†i kho·∫£n
    const toggleActive = async (user) => {
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/users/${user.user_id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify({ is_active: !user.is_active }),
            });
            if (res.ok) {
                fetchUsers();
            } else {
                alert("Kh√¥ng th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i!");
            }
        } catch (err) {
            console.error("L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
        }
    };

    // üßë‚Äçüíº L∆∞u thay ƒë·ªïi quy·ªÅn
    const handleSaveEdit = async () => {
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/users/${editingUser.user_id}`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify({
                    role: editingUser.role,
                    is_active: editingUser.is_active,
                }),
            });
            if (res.ok) {
                alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                setEditingUser(null);
                fetchUsers();
            } else {
                alert("L·ªói khi l∆∞u!");
            }
        } catch (err) {
            console.error("L·ªói l∆∞u user:", err);
        }
    };

    if (loading) return <p>ƒêang t·∫£i danh s√°ch ng∆∞·ªùi d√πng...</p>;

    return (
        <div className="users-container">
            <div className="products-header">
                <h2>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h2>
            </div>

            <table className="products-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Email</th>
                        <th>Quy·ªÅn</th>
                        <th>Tr·∫°ng th√°i</th>
                        <th>Ng√†y t·∫°o</th>
                        <th>Thao t√°c</th>
                    </tr>
                </thead>
                <tbody>
                    {users.map((u) => {
                        const isEditing = editingUser && editingUser.user_id === u.user_id;
                        return (
                            <tr key={u.user_id}>
                                <td>{u.user_id}</td>
                                <td>{u.email}</td>
                                <td>
                                    {isEditing ? (
                                        <select
                                            value={editingUser.role}
                                            onChange={(e) =>
                                                setEditingUser({
                                                    ...editingUser,
                                                    role: e.target.value,
                                                })
                                            }
                                        >
                                            <option value="user">User</option>
                                            <option value="admin">Admin</option>
                                        </select>
                                    ) : (
                                        <span
                                            className={
                                                u.role === "admin"
                                                    ? "role-admin"
                                                    : "role-user"
                                            }
                                        >
                                            {u.role}
                                        </span>
                                    )}
                                </td>
                                <td>
                                    {isEditing ? (
                                        <select
                                            value={editingUser.is_active ? "true" : "false"}
                                            onChange={(e) =>
                                                setEditingUser({
                                                    ...editingUser,
                                                    is_active: e.target.value === "true",
                                                })
                                            }
                                        >
                                            <option value="true">Ho·∫°t ƒë·ªông</option>
                                            <option value="false">B·ªã kh√≥a</option>
                                        </select>
                                    ) : (
                                        <span
                                            className={
                                                u.is_active
                                                    ? "status-active"
                                                    : "status-inactive"
                                            }
                                        >
                                            {u.is_active ? "Ho·∫°t ƒë·ªông" : "B·ªã kh√≥a"}
                                        </span>
                                    )}
                                </td>
                                <td>{new Date(u.created_at).toLocaleDateString()}</td>
                                <td>
                                    {isEditing ? (
                                        <>
                                            <button
                                                className="btn-save"
                                                onClick={handleSaveEdit}
                                            >
                                                L∆∞u
                                            </button>
                                            <button
                                                className="btn-cancel"
                                                onClick={() => setEditingUser(null)}
                                            >
                                                H·ªßy
                                            </button>
                                        </>
                                    ) : (
                                        <>
                                            <button
                                                className="btn-edit"
                                                onClick={() =>
                                                    setEditingUser({ ...u })
                                                }
                                            >
                                                S·ª≠a
                                            </button>
                                            <button
                                                className="btn-toggle"
                                                onClick={() => toggleActive(u)}
                                            >
                                                {u.is_active ? "Kh√≥a" : "M·ªü"}
                                            </button>
                                            <button
                                                className="btn-delete"
                                                onClick={() =>
                                                    handleDeleteUser(u.user_id)
                                                }
                                            >
                                                X√≥a
                                            </button>
                                        </>
                                    )}
                                </td>
                            </tr>
                        );
                    })}
                </tbody>
            </table>
        </div>
    );
};

export default AdminUsers;
