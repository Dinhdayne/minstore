import React, { useState, useEffect } from "react";
import "./AdminPage.css";

const AdminOrders = () => {
    const [orders, setOrders] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedOrder, setSelectedOrder] = useState(null);
    const [orderDetails, setOrderDetails] = useState(null);
    const [updating, setUpdating] = useState(false);

    // üü¶ L·∫•y danh s√°ch t·∫•t c·∫£ ƒë∆°n h√†ng
    const fetchOrders = async () => {
        try {
            setLoading(true);
            const token = localStorage.getItem("token");
            const res = await fetch("http://localhost:3000/api/orders/all", {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
            });
            const data = await res.json();
            if (!res.ok) throw new Error(data.message || "Kh√¥ng th·ªÉ t·∫£i ƒë∆°n h√†ng");
            setOrders(data);
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    };

    // üü¶ L·∫•y chi ti·∫øt ƒë∆°n h√†ng
    const fetchOrderDetails = async (orderId) => {
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/orders/${orderId}`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
            });
            const data = await res.json();
            if (res.ok) setOrderDetails(data);
            else alert(data.message);
        } catch (error) {
            console.error(error);
            alert("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt ƒë∆°n h√†ng");
        }
    };

    // üü¶ C·∫≠p nh·∫≠t t·ªìn kho khi ƒë∆°n h√†ng ƒë√£ giao
    const updateStockAfterDelivery = async (orderId) => {
        try {
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/orders/${orderId}/update-stock`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`
                },
            });
            const data = await res.json();
            if (res.ok) {
                console.log("‚úÖ C·∫≠p nh·∫≠t t·ªìn kho th√†nh c√¥ng:", data.message);
            } else {
                console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t t·ªìn kho:", data.message);
            }
        } catch (err) {
            console.error("‚ùå L·ªói API c·∫≠p nh·∫≠t t·ªìn kho:", err);
        }
    };

    // üü¶ C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const handleStatusChange = async (orderId, newStatus) => {
        if (!window.confirm("X√°c nh·∫≠n thay ƒë·ªïi tr·∫°ng th√°i ƒë∆°n h√†ng?")) return;

        try {
            setUpdating(true);
            const token = localStorage.getItem("token");
            const res = await fetch(`http://localhost:3000/api/orders/${orderId}/status`, {
                method: "PUT",
                headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${token}`,
                },
                body: JSON.stringify({ status: newStatus }),
            });
            const data = await res.json();
            if (res.ok) {
                alert("‚úÖ " + data.message);
                // üîπ N·∫øu tr·∫°ng th√°i l√† "delivered" th√¨ c·∫≠p nh·∫≠t t·ªìn kho
                if (newStatus === "delivered") {
                    await updateStockAfterDelivery(orderId);
                }
                fetchOrders();
            } else {
                alert("‚ùå " + data.message);
            }
        } catch (error) {
            console.error(error);
            alert("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
        } finally {
            setUpdating(false);
        }
    };

    useEffect(() => {
        fetchOrders();
    }, []);

    return (
        <div className="admin-page">
            <h2 className="admin-title">Danh s√°ch ƒë∆°n h√†ng</h2>

            {loading ? (
                <p>ƒêang t·∫£i...</p>
            ) : error ? (
                <p className="error">{error}</p>
            ) : orders.length === 0 ? (
                <p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</p>
            ) : (
                <table className="admin-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Email</th>
                            <th>Ng√†y ƒë·∫∑t</th>
                            <th>T·ªïng ti·ªÅn</th>
                            <th>SƒêT</th>
                            <th>Tr·∫°ng th√°i</th>
                            <th>ƒê·ªãa ch·ªâ</th>
                            <th>Thao t√°c</th>
                        </tr>
                    </thead>
                    <tbody>
                        {orders.map((order) => (
                            <tr key={order.order_id}>
                                <td>{order.order_id}</td>
                                <td>{order.user_email || "·∫®n danh"}</td>
                                <td>{new Date(order.order_date).toLocaleString("vi-VN")}</td>
                                <td>{order.total_amount?.toLocaleString("vi-VN")}‚Ç´</td>
                                <td>{order.phone}</td>
                                <td>
                                    <select
                                        value={order.status}
                                        onChange={(e) =>
                                            handleStatusChange(order.order_id, e.target.value)
                                        }
                                        // üîπ Disable khi ƒëang c·∫≠p nh·∫≠t ho·∫∑c ƒë√£ giao / h·ªßy
                                        disabled={
                                            updating ||
                                            order.status === "delivered" ||
                                            order.status === "cancelled"
                                        }
                                    >
                                        <option value="pending">pending</option>
                                        <option value="processing">processing</option>
                                        <option value="shipped">shipped</option>
                                        <option value="delivered">delivered</option>
                                        <option value="cancelled">cancelled</option>
                                    </select>
                                </td>
                                <td>
                                    {[order.address_line, order.ward, order.district, order.city]
                                        .filter(Boolean)
                                        .join(", ")}
                                </td>
                                <td>
                                    <button
                                        className="btn-view"
                                        onClick={() => {
                                            setSelectedOrder(order.order_id);
                                            fetchOrderDetails(order.order_id);
                                        }}
                                    >
                                        Xem
                                    </button>
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            )}

            {/* üü° Modal xem chi ti·∫øt ƒë∆°n h√†ng */}
            {selectedOrder && orderDetails && (
                <div className="modal-overlay" onClick={() => setSelectedOrder(null)}>
                    <div className="modal" onClick={(e) => e.stopPropagation()}>
                        <h3>Chi ti·∫øt ƒë∆°n #{orderDetails.order_id}</h3>
                        <p><strong>Ng∆∞·ªùi ƒë·∫∑t:</strong> {orderDetails.first_name || orderDetails.email} {orderDetails.last_name}</p>
                        <p><strong>SƒêT:</strong> {orderDetails.phone}</p>
                        <p><strong>Ng√†y ƒë·∫∑t:</strong> {new Date(orderDetails.order_date).toLocaleString("vi-VN")}</p>
                        <p><strong>Tr·∫°ng th√°i:</strong> {orderDetails.status}</p>
                        <p><strong>ƒê·ªãa ch·ªâ giao h√†ng:</strong> {[orderDetails.address_line, orderDetails.ward, orderDetails.district, orderDetails.city].filter(Boolean).join(", ")}</p>

                        <h4>S·∫£n ph·∫©m trong ƒë∆°n:</h4>
                        <table className="admin-table">
                            <thead>
                                <tr>
                                    <th>S·∫£n ph·∫©m</th>
                                    <th>M√†u</th>
                                    <th>Size</th>
                                    <th>S·ªë l∆∞·ª£ng</th>
                                    <th>Gi√°</th>
                                </tr>
                            </thead>
                            <tbody>
                                {orderDetails.items.map((item) => (
                                    <tr key={item.order_item_id}>
                                        <td>{item.product_name}</td>
                                        <td>{item.attributes?.color
                                            ? `${item.attributes.color}`
                                            : ""}</td>
                                        <td>{item.attributes.size}</td>
                                        <td>{item.quantity}</td>
                                        <td>{item.price?.toLocaleString("vi-VN")}‚Ç´</td>
                                    </tr>
                                ))}
                            </tbody>
                        </table>
                        <p><strong>T·ªïng ti·ªÅn:</strong> {orderDetails.total_amount?.toLocaleString("vi-VN")}‚Ç´</p>
                        <div className="modal-footer">
                            <button onClick={() => setSelectedOrder(null)}>ƒê√≥ng</button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default AdminOrders;
